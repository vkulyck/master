<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace GmWeb.Tests.Api.Extensions;

public static partial class Patterns
{
<#
    GenerateTheorems(); 
#>
}
<#+
public static Dictionary<string,string> Axioms = new Dictionary<string,string>
{
    { "Numeric", "0-9" },
    { "Upper", "A-Z" },
    { "Lower", "a-z" },
    { "Alpha", "A-Za-z" },
    { "Spacing", @"\s" }
};

public static class Theorems
{
    // Operators
    public static string Include(string set) => $"[{set}]";
    public static string Exclude(string set) => $"[^{set}]";
    public static string Repeat(string set) => $"{set}+";
    public static string Complete(string set) => $"^{set}$";

    // Quantifiers
    public static string Only(string rule) => Complete(Repeat(Include(rule)));
    public static string None(string rule) => Complete(Repeat(Exclude(rule)));
    public static string Many(string rule) => Repeat(Include(rule));
    public static string With(string rule) => Include(rule);
    public static string Without(string rule) => Exclude(rule);
        
}

public void GenerateTheorems()
{
  foreach(var name in Axioms.Keys)
  {
#>
<#+ #>    public static readonly Regex Any<#= name #> = new Regex(@"<#= Theorems.With(Axioms[name]) #>");
<#+ #>    public static readonly Regex AnyNon<#= name #> = new Regex(@"<#= Theorems.Without(Axioms[name]) #>");
<#+ #>    public static readonly Regex Only<#= name #> = new Regex(@"<#= Theorems.Only(Axioms[name]) #>");
<#+ #>    public static readonly Regex OnlyNon<#= name #> = new Regex(@"<#= Theorems.None(Axioms[name]) #>");
<#+ #>    public static readonly Regex Seq<#= name #> = new Regex(@"<#= Theorems.Many(Axioms[name]) #>");
<#+
  }
}
#>