using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Ical.Net;
using Ical.Net.Evaluation;
using Ical.Net.Serialization.DataTypes;
using Ical.Net.Utility;
using Ical.Net.DataTypes;
using MappingFactory = GmWeb.Logic.Utility.Mapping.EntityMappingFactory;

namespace GmWeb.Logic.Data.Models.Carma;

public class CalendarRecurrence
{
    public static readonly CalendarRecurrence SingleOccurrence = new CalendarRecurrence { Count = 1 };
    /// <summary>
    /// Specifies how often an event should occur.
    /// The following rule configures the scheduled event to occur every quarter:
    /// <code>
    ///     var recurrence = scheduledEvent.RecurrenceRules.First();
    ///     recurrence.Frequency = FrequencyType.Monthly;
    ///     recurrence.Interval = 3;
    /// </code>
    /// </summary>
    public FrequencyType Frequency { get; set; } = FrequencyType.None;
    /// <summary>
    /// The last date for which this recurrence rule is active.
    /// </summary>
    public DateTime Until { get; set; } = DateTime.MinValue;
    /// <summary>
    /// The maximum number of occurrences that are generated by the recurrence rule. 
    /// </summary>
    public int Count { get; set; } = int.MinValue;
    /// <summary>
    /// Combined with Frequency, specifies how often an event should occur.
    /// The following rule configures the scheduled event to occur every other day:
    /// <code>
    ///     var recurrence = scheduledEvent.RecurrenceRules.First();
    ///     recurrence.Frequency = FrequencyType.Daily;
    ///     recurrence.Interval = 2;
    /// </code>
    /// </summary>
    public int Interval { get; set; } = 1;

    #region Day Lists
    /// <summary>
    /// The days of the week for which occurrences are generated.
    /// </summary>
    public List<WeekDay> ByDay { get; set; } = new List<WeekDay>();

    /// <summary> The ordinal days of the month associated with this recurrence pattern. Valid values are 1-31. </summary>
    public List<int> ByMonthDay { get; set; } = new List<int>();

    /// <summary>
    /// List of months in the year associated with this rule. Valid values are 1 through 12.
    /// </summary>
    public List<int> ByMonth { get; set; } = new List<int>();
    #endregion

    public static implicit operator RecurrencePattern(CalendarRecurrence cr)
    {
        var rp = MappingFactory.Instance.Map<CalendarRecurrence, RecurrencePattern>(cr);
        return rp;
    }

    public static implicit operator CalendarRecurrence(RecurrencePattern rp)
    {
        var cr = MappingFactory.Instance.Map<RecurrencePattern, CalendarRecurrence>(rp);
        return cr;
    }
}