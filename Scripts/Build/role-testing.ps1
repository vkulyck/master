. "$PSScriptRoot\..\init.ps1" # Initialize environment and GM admin framework

Set-Alias redis "$env:ProgramW6432\Redis\redis-cli.exe"
Set-Alias aws "$env:ProgramW6432\Amazon\AWSCLIV2\aws.exe"

Start-Log "role-test"

$script:RoleTemplate = "arn:aws:iam::823263112659:role/{RoleName}"
$script:MfaTemplate = "arn:aws:iam::823263112659:mfa/{PrincipalName}"
$script:CombinedRoleName = "gm-dev-deploy-role"
$script:AccessRoleName = "gm-dev-data-deploy-role"
$script:DeployPrincipalName = "gm-deploy-agent"
$script:DevPrincipalName = "gm-dev-agent"

function Invoke-Redis {
  $private:RedisHost = "redis-11125.c60.us-west-1-2.ec2.cloud.redislabs.com"
  $private:RedisPassword = "X3MYYSNeuXHqP4AAttAyn797"
  $private:RedisPort = 11125
  $result = redis -h $private:RedisHost -p $private:RedisPort -a $private:RedisPassword @args
  if([String]::IsNullOrWhiteSpace($result)) {
    return $null
  }
  if($result -is [Array]) {
    $result = $result -Join "`n"
  }
  return $result
}

function Invoke-Aws {
  $result = aws @args
  if([String]::IsNullOrWhiteSpace($result)) {
    return $null
  }
  if($result -is [Array]) {
    $result = $result -Join "`n"
  }
  return $result
}

function Get-SessionName {
  param(
    [Parameter(Mandatory=$true)]
    [String]$RoleName,
    [Parameter(Mandatory=$true)]
    [String]$PrincipalName
  )
  return "$PrincipalName`_$RoleName.session"
}
function Read-CachedSession {
  param(
    [Parameter(Mandatory=$true)]
    [String]$RoleName,
    [Parameter(Mandatory=$true)]
    [String]$PrincipalName
  )
  $key = Get-SessionName -RoleName $RoleName -PrincipalName $PrincipalName
  $json = Invoke-Redis get $key
  if($null -eq $json) {
    return $null
  }
  $data = $json | Convert-JsonToHashtable
  return $data
}

function Write-CachedSession {
  param(
    [Parameter(Mandatory=$true)]
    [String]$RoleName,
    [Parameter(Mandatory=$true)]
    [String]$PrincipalName,
    [Parameter(Mandatory=$true)]
    $Data,
    [Parameter(Mandatory=$false)]
    [DateTime]$ExpiresAt
  )
  if($Data -is [System.Collections.IDictionary]) {
    $json_data = $Data | ConvertTo-RedisJson
  } elseif($Data -is [String]) {
    $json_data = $Data | Format-RedisJson
  } else {
    throw "Invalid data type supplied for Redis caching: $($Data.GetType().Name)"
  }
  $key = $(Get-SessionName -RoleName $RoleName -PrincipalName $PrincipalName)
  [int]$unix_ms = ($ExpiresAt - [DateTime]::Now).TotalMilliseconds
  $result = Invoke-Redis set $key $json_data PX $unix_ms
}

function Request-AwsIamRole {
  param(
      [Parameter(Mandatory=$true)]
      [String]$RoleName,
      [Parameter(Mandatory=$true)]
      [String]$PrincipalName,
      [Parameter(Mandatory=$false)]
      [Switch]$UseMfa = $false,
      [Parameter(Mandatory=$false)]
      [Switch]$UseProfile = $false,
      [Parameter(Mandatory=$false)]
      [TimeSpan]$Duration = "00:15:00"
  )
  $credentials = Read-CachedSession -RoleName $RoleName -PrincipalName $PrincipalName
  if($null -ne $credentials) {
    return $credentials
  }
  $request = @(
    "--role-arn"; $script:RoleTemplate -replace '{RoleName}',$RoleName;
    "--role-session-name"; $(Get-SessionName -RoleName $RoleName -PrincipalName $PrincipalName);
    "--duration-seconds"; $Duration.TotalSeconds
  )
  if($UseProfile) {
    $request += @(
      "--profile"; $PrincipalName;
    )
  }
  if($UseMfa) {
    $serial_number = $script:MfaTemplate -replace '{PrincipalName}',$PrincipalName
    [Int]$mfa_token = Read-Host "Enter an MFA token generated by the virtual MFA device assigned to principal '$PrincipalName'"
    $request += @(
      "--serial-number"; $serial_number;
      "--token-code"; $mfa_token;
    )
  }
  $credentials = Invoke-Aws sts assume-role @request | Convert-JsonToHashtable
  Write-CachedSession -RoleName $RoleName -PrincipalName $PrincipalName -Data $credentials -ExpiresAt $credentials.Credentials.Expiration
  return $credentials
}

function Set-AwsEnvironment {
  param(
    [Parameter(Mandatory=$true)]
    $Credentials
  )
  $Env:AWS_ACCESS_KEY_ID = $Credentials.AccessKeyId
  $Env:AWS_SECRET_ACCESS_KEY = $Credentials.SecretAccessKey
  $Env:AWS_DEFAULT_REGION = $(aws configure get region)
  $Env:AWS_SESSION_TOKEN = $Credentials.SessionToken
}

# Write-CachedSession -RoleName "dave" -PrincipalName "burf-diggly" -Data '{ "what": "bloopy" }'-ExpiresAt $([DateTime]::Now.AddMinutes(15))
$credentials = Request-AwsIamRole -RoleName $script:CombinedRoleName -PrincipalName $script:DeployPrincipalName -UseProfile
Set-AwsEnvironment($credentials.Credentials)
@"
3.  Use gm-dev-deploy-role to assume gm-dev-data-deploy-role, with the 
mfa from gm-dev-agent, because gm-dev-deploy-role trusts 
gm-dev-agent and thus it can use the mfa for gm-dev-agent.
"@
$credentials = Request-AwsIamRole -RoleName $script:AccessRoleName -PrincipalName $script:DevPrincipalName -UseMfa
Set-AwsEnvironment($credentials.Credentials)
#$credentials | Write-JsonConfig "./role-testing-output.json"
# $credentials = $(get-content "./role-testing-output.txt" -Join "`n") 
# $credentials = $credentials | Convert-JsonToHashtable


"some test content on $([DateTime]::Now.ToString('o'))" | Set-Content -Path './test-upload.txt'
aws s3 cp "./test-upload.txt" "s3://deploy.goodmojo.io/Dev/Configs/test-upload.txt" 
Remove-Item "./test-download.txt" -ErrorAction Ignore
aws s3 cp "s3://deploy.goodmojo.io/Dev/Configs/test-upload.txt" "./test-download.txt"
Get-Content "./test-download.txt" | Write-Host

Stop-Log